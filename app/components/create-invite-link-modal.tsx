'use client';

import { X, Copy, CheckCircle } from 'lucide-react';
import { cn } from '@/app/lib/utils';
import { useState } from 'react';
import { useDomain } from '@/app/contexts/domain-context';

interface CreateInviteLinkModalProps {
  isOpen: boolean;
  onClose: () => void;
  roleName: string;
  domainName?: string;
}

export function CreateInviteLinkModal({ isOpen, onClose, roleName, domainName }: CreateInviteLinkModalProps) {
  const [isCopied, setIsCopied] = useState(false);
  const { currentDomain } = useDomain();
  
  // Simulated invite link - in production this would be generated by the backend
  // Format: /invite/[domainId]/[roleId]/[inviteCode]
  const inviteCode = Date.now().toString(36); // Simple invite code for demo
  const domainId = currentDomain?.id || 'unknown';
  const roleId = currentDomain?.roles.find(r => r.name === roleName)?.id || 'unknown';
  const inviteLink = `${window.location.origin}/invite/${domainId}/${roleId}/${inviteCode}`;

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(inviteLink);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  if (!isOpen) return null;

  return (
    <>
      {/* Backdrop */}
      <div
        className="fixed inset-0 bg-black bg-opacity-50 z-50"
        onClick={onClose}
      />

      {/* Modal */}
      <div className="fixed inset-x-0 bottom-0 z-50 md:inset-0 md:flex md:items-center md:justify-center">
        <div className={cn(
          "bg-white rounded-t-2xl md:rounded-lg shadow-xl",
          "w-full md:max-w-lg",
          "max-h-[90vh] md:max-h-[80vh]",
          "flex flex-col"
        )}>
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900">Create Invite Link</h2>
            <button
              onClick={onClose}
              className="p-1.5 hover:bg-gray-100 rounded-md transition-colors"
              aria-label="Close modal"
            >
              <X className="w-5 h-5 text-gray-600" />
            </button>
          </div>

          {/* Content */}
          <div className="flex-1 overflow-y-auto p-4">
            <div className="space-y-4">
              {/* Info */}
              <div className="bg-gray-50 rounded-lg p-4">
                <p className="text-sm text-gray-700">
                  Generate an invite link for the <span className="font-medium">{roleName}</span> role
                  {domainName && (
                    <>
                      {' '}in <span className="font-medium">{domainName}</span>
                    </>
                  )}.
                </p>
              </div>

              {/* Link Display */}
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Invite Link</label>
                <div className="flex items-center gap-2">
                  <input
                    type="text"
                    readOnly
                    value={inviteLink}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-sm"
                  />
                  <button
                    onClick={handleCopy}
                    className={cn(
                      "p-2 rounded-lg transition-all duration-200",
                      isCopied
                        ? "bg-green-100 text-green-600"
                        : "bg-gray-100 hover:bg-gray-200 text-gray-600"
                    )}
                    aria-label="Copy link"
                  >
                    {isCopied ? (
                      <CheckCircle className="w-5 h-5" />
                    ) : (
                      <Copy className="w-5 h-5" />
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex gap-3">
              <button
                onClick={onClose}
                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Close
              </button>
              <button
                onClick={handleCopy}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                {isCopied ? 'Copied!' : 'Copy Link'}
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}